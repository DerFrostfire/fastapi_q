# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
# 123
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: docker:latest

stages: # List of stages for jobs, and their order of execution
  - build
  - deploy

before_script:
  - DOCKER_APP_IMAGE=${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-latest
  - echo $DOCKER_APP_IMAGE
  - DOCKER_PIPELINE_IMAGE=${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  - echo $DOCKER_PIPELINE_IMAGE

build-job:
  stage: build
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" registry.gitlab.quniq.net
    - docker build -t ${DOCKER_APP_IMAGE} -t ${DOCKER_PIPELINE_IMAGE} .
    - docker push ${DOCKER_APP_IMAGE}
    - docker push ${DOCKER_PIPELINE_IMAGE}
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'
      when: on_success

deploy-test:
  image: registry.gitlab.quniq.net/quniq/docker/uploader:latest
  stage: deploy
  environment:
    name: test
  script:
    - echo "Change permissions..."
    - chmod 755 -R ./ci
    - echo "Add ssh keys..."
    - cp $SSH_UPLOADER_KEY ~/.ssh/id_rsa
    - cp $SSH_UPLOADER_KEY_PUB ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa
    - chmod 644 ~/.ssh/id_rsa.pub
    - echo "Preparing scripts..."
    - sed -i -e "s|%DEPLOY_PATH%|${DEPLOY_PATH}|g" ./ci/before.sh
    - sed -i -e "s|%DEPLOY_PATH%|${DEPLOY_PATH}|g" ./ci/update.sh
    - sed -i -e "s|%DEPLOY_PATH%|${DEPLOY_PATH}|g" ./ci/after.sh
    - mkdir ./ci/build
    - cp ./ci/test/docker-compose.yml ./ci/build/docker-compose.yml
    - cat ./ci/build/docker-compose.yml | sed "s|%DOCKER_PIPELINE_IMAGE%|${DOCKER_PIPELINE_IMAGE}|g" | grep image
    - sed -i -e "s|%DOCKER_PIPELINE_IMAGE%|${DOCKER_PIPELINE_IMAGE}|g" ./ci/build/docker-compose.yml
    - echo "Deploying application..."
#    - ssh uploader@${DEPLOY_SERVER} 'bash -s ' < ./ci/before.sh
    - rsync -avuz ./ci/build/* uploader@${DEPLOY_SERVER}:${DEPLOY_PATH}
    - ssh uploader@${DEPLOY_SERVER} 'bash -s ' < ./ci/update.sh
#    - ssh uploader@${DEPLOY_SERVER} 'bash -s ' < ./ci/after.sh
  rules:
    - if: $CI_COMMIT_REF_NAME == 'develop' && $CI_PIPELINE_SOURCE != 'merge_request_event'
      when: on_success